include supercrouch
include palette
include balancing
include animmain

// States / Object detection (required due to many object interactions using the running state)
constant u8 char.state.TWIRLJUMP = 0x12 // These two states are to avoid rendering flags normally placed on the running state
constant u8 char.state.FALLING = 0x30

constant u8 ObjectInteraction.None = 0 // Going to use 0 in place of it, this is just for documentation, since 0 already represents a 'null' value
constant u8 ObjectInteraction.MGZSpinningTop = 1
constant u8 ObjectInteraction.MHZElevator = 2

global u8 ObjectInteraction.isInteracting
global bool isInAir = false //air

// Mod Options
global u8 twirlOn = 0
global u8 peelOutStyle = 0
global u8 smoothAnimation = 1 // Turn off the smooth animation (on by default)
global u8 fallAnim = 1

// Timers for animations
global s64 idleTime = 0
global s32 lookUpTime = 0
global s32 lookDownTime = 0
global s32 hangTimer = 0
global s32 bounce = 0 // Correct advertising
global s8 peelTimer = 0
global s8 skidTimer = 0
global s8 runTimer = 0
global s8 landTimer = 0
global s8 maxLandFrame = 20 // When the animation should end
global s64 FallTimer = 0 // How long you have been in air
// global u8 monkeyBarTimer = 0 (Too lazy to properly implement)

// Springs

//# address-hook(0x022f98) end(0x02304a)
function void SpringVertical.ApplyToCharacter()
{
	base.SpringVertical.ApplyToCharacter()

	if (isMainCharacter(CHARACTER_SONIC)) // Will be kept until other characters are implemented
	{
		if (objA0.subtype2c & 0x01) && (twirlOn == 1)
			objA1.state = char.state.TWIRLJUMP
	}
}

//MGZ Spinning Tops

//# address-hook(0x034c54) end(0x034d8c)
function void fn034c54()
{
	base.fn034c54()

	if (isMainCharacter(CHARACTER_SONIC))
		ObjectInteraction.isInteracting = ObjectInteraction.MGZSpinningTop
}

// MHZ elevators

//# address-hook(0x03e658) end(0x03e680)
function void fn03e658()
{
	base.fn03e658()

	if (isMainCharacter(CHARACTER_SONIC))
		ObjectInteraction.isInteracting = ObjectInteraction.MHZElevator
}

// CNZ Balloons

//# address-hook(0x0317ae) end(0x03181c)
function void fn0317ae()
{
	base.fn0317ae()

	if (isMainCharacter(CHARACTER_SONIC))
	{
		if (objA1.state != char.state.ROLLING)
			objA1.state = char.state.STRAIGHTJUMP
	}

}

//# address-hook(0x010bba) end(0x010c8e)
function void Character.UpdateNormalState.Sonic()
{
	base.Character.UpdateNormalState.Sonic()
	Character.StateTrackUpdate()
}

function void Character.StateTrackUpdate()
{
	if (char.flags & char.flag.IN_AIR && ObjectInteraction.isInteracting == 0)
		isInAir = true // ONLY FOR THE SUMMERSAULT LANDING ANIMATION
	else
	{
		if (char.spindash == 0x80 || char.state != char.state.RUNNING) // Cannot be true if you are not running normally
			isInAir = false
	}


	// The isInAir variable is only to be set to false when 
	// it is absolutely necessary, from here on out it'll be handled
	// in the animation code

	if (char.velocity.y > 0 && isInAir && char.state == char.state.TWIRLJUMP)
	{
		if (fallAnim != 0)
			char.state = char.state.FALLING
		else
			char.state = char.state.RUNNING
	}
	
	if ((char.flags & char.flag.IN_AIR == 0) || char.state != char.state.RUNNING || char.state != char.state.HANGING)
		ObjectInteraction.isInteracting = 0

	if ((char.flags & char.flag.IN_AIR == 0) && char.state == char.state.FALLING)
		char.state = char.state.RUNNING

	if ((char.flags & char.flag.IN_AIR == 0) || char.state == char.state.ROLLING)
		bounce = 0
	
}